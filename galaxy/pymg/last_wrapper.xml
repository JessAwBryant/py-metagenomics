<tool id="last_wrapper" name="LastWrapper" version="0.1.5">
    <description> compare short reads against reference protein databases</description>
    <command>
      lastWrapper.py
        -N $numChunks
        -f $outputFormat
        -n $hitsPerRead
        #if ($db_type.alph=="prot" or $db_type.alph=="prot-hist") and $db_type.frameShiftPenalty!="" 
            -F $db_type.frameShiftPenalty
        #end if
		$maskWithTantan
        -m $multiplicity
	#if $advanced.show=="yes"
		#if str($advanced.matchScore).strip()!="" #-r $advanced.matchScore #end if
		#if str($advanced.mismatchCost).strip()!="" #-q $advanced.mismatchCost #end if
		#if str($advanced.gapExistenceCost).strip()!="" #-a $advanced.gapExistenceCost #end if
		#if str($advanced.gapExtensionCost).strip()!="" #-b $advanced.gapExtensionCost #end if
		#if str($advanced.urpCost).strip()!="" #-c $advanced.urpCost #end if
		#if str($advanced.maximumScoreDropGapped).strip()!="" #-x $advanced.maximumScoreDropGapped #end if
		#if str($advanced.maximumScoreDropGapless).strip()!="" #-y $advanced.maximumScoreDropGapless #end if
		#if str($advanced.maximumScoreDropFinal).strip()!="" #-z $advanced.maximumScoreDropFinal #end if
		#if str($advanced.minimumGaplessScore).strip()!="" #-e $advanced.minimumGaplessScore #end if
		#if str($advanced.lastScoreCutoff).strip()!="" #-e $advanced.lastScoreCutoff #end if
		#if str($advanced.temperature).strip()!="" #-t $advanced.temperature #end if
	#end if
        -Q $format_type.format
        -o $output1
        #if $db_type.alph=="nucl-hist" or $db_type.alph=="prot-hist"
            "${os.path.join($db_type.database.extra_files_path,'lastdb')}"
        #else
            "${db_type.source_select.fields.path}"
        #end if
        $input_query
    </command>
    <inputs>
      <conditional name="format_type">
       <param name="format" type="select" label="Sequence format">
        <option value="0">Fasta</option>
        <option value="1">Fastq (Sanger)</option>
        <option value="3">Fastq (Illumina)</option>
        <option value="2">Fastq (Solexa)</option>
       </param>
       <when value="0">
        <param name="input_query" type="data" format="fasta" label="Compare these sequences" help="If you don't see your file, try changing the format above"/> 
       </when>
       <when value="1">
        <param name="input_query" type="data" format="fastq,fastqsanger,fastqcssanger" label="Compare these sequences" help="If you don't see your file, try changing the format above"/> 
       </when>
       <when value="2">
        <param name="input_query" type="data" format="fastqsolexa" label="Compare these sequences" help="If you don't see your file, try changing the format above"/> 
       </when>
       <when value="3">
        <param name="input_query" type="data" format="fastqillumina" label="Compare these sequences" help="If you don't see your file, try changing the format above"/> 
       </when>
      </conditional>
      <param name="outputFormat" type="select" label="Output format">
            <option value="0">Lastal tabular</option>
            <option value="1">MAF</option>
            <option value="blast">Blast-like (not-yet-implemented)</option>
            <option value="gene" selected="True">Gene: Blast-like plus read and hit description placeholders</option> 
            <option value="liz">Liz: Blast-like plus hit description placeholders</option>
      </param>
      <param name="maskWithTantan" type="select" label="Complexity Masking (ignore lowercase)" help="If you have already run tantan (or something similar) to put low complexity regions in lowercase, select level 1, 2 or 3 so lastWrapper doesn't waste time re-running tantan.">
            <option value=" " selcted="True">run tantan and apply level 2 masking</option>
            <option value="-u 0">No masking</option>
            <option value="-u 1">Level 1: during gapless extensions</option>
            <option value="-u 2">Level 2: during gapped and gapless extensions (but not final)</option>
            <option value="-u 3">Level 3: always</option>
      </param>
      <param name="numChunks" type="integer" size="10" value="12" label="Number of threads to run (by fragmenting FASTA into chunks)"/>
        
      <param name="hitsPerRead" type="integer" size="10" value="10" label="Limit output to this many hits per read." help="Less than or equal to 0 means unlimited."/>
      <conditional name="db_type">
       <param name="alph" type="select" label="Reference Database">
        <option value="nucl">Nucleotide (Built-in)</option>
        <option value="prot">Protein (Built-in)</option>
        <option value="nucl-hist">Nucleotide (History)</option>
        <option value="prot-hist">Protein (History)</option>
       </param>
       <when value="nucl">
	<param name="source_select" type="select" display="radio" label="against target database">
            <options from_data_table="pipe_lastdb_n" />
        </param>
       </when>
       <when value="prot">
	<param name="source_select" type="select" display="radio" label="against target database">
            <options from_data_table="pipe_lastdb_p" />
        </param>
        <param name="frameShiftPenalty" type="integer" size="10" value="500" label="Score penalty for frameshift. Set to 15 for 454 data." help="Leave blank if input sequences are protein" optional="true"/>
       </when>
       <when value="nucl-hist">
         <param name="database" type="data" format="lastdbn" label="target last database from history" help="You must have a last-formatted sequence datbase in your history. Use the lastdb tool to make one."/> 
       </when>
       <when value="prot-hist">
         <param name="database" type="data" format="lastdbp" label="target last database from history" help="You must have a last-formatted sequence datbase in your history. Use the lastdb tool to make one."/> 
        <param name="frameShiftPenalty" type="integer" size="10" value="500" label="Score penalty for frameshift. Set to 15 for 454 data." help="Leave blank if input sequences are protein" optional="true"/>
       </when>
      </conditional>
      <param name="multiplicity" type="integer" size="10" value="10" label="Initial match multiplicity (-m)" help="10 is good deafult, though 5 is faster and does a good enough job for rRNA"/> 
      <conditional name="advanced">
         <param name="show" type="select" label="Advanced Options (ignored if blank)">
          <option value="no" selected="True">Hide advanced options</option>
          <option value="yes">Show advanced options</option>
         </param>
         <when value="yes">
         	<param name="matchScore" type="integer" size="10" value="" label="Match score (-r)" help="Leave blank for default: DNA: 1, protein: blosum62, fastq: 6" optional="true"/>
         	<param name="mismatchCost" type="integer" size="10" value="" label="Mismatch cost (-q)" help="Leave blank for default: DNA: 1, protein: blosum62, fastq: 18" optional="true"/>
         	<param name="gapExistenceCost" type="integer" size="10" value="" label="Gap existence cost (-a)" help="Leave blank for default: DNA: 7, protein 11, fastq: 21" optional="true"/>
         	<param name="gapExtensionCost" type="integer" size="10" value="" label="Gap extension cost (-b)" help="Leave blank for default: fasta: 1, fastq:  9" optional="true"/>
         	<param name="urpCost" type="integer" size="10" value="" label="Unaligned residue pair cost (-c)" help="Leave blank for default: 1000" optional="true"/>
		<param name="maximumScoreDropGapped" type="integer" size="10" value="" label="maximum score drop for gapped alignments (-x)" help="Leave blank for default: DNA: max[y, a+b*20], protein: 15" optional="true"/>
		<param name="maximumScoreDropGapless" type="integer" size="10" value="" label="maximum score drop for gapless alignments (-y)" help="Leave blank for default: DNA: t*10, protein: 7" optional="true"/>
		<param name="maximumScoreDropFinal" type="integer" size="10" value="" label="maximum score drop for final gapped alignments (-z)" help="Leave blank for default: DNA: x, protein: 25" optional="true"/>
		<param name="temperature" type="float" size="10" value="" label="'temperature' for calculating probabilities (-t)" help="Leave blank for default: 1/lambda (see below)" optional="true"/>
		<param name="minimumGaplessScore" type="integer" size="10" value="" label="Minimum score for gapless alignments (-d)" help="Leave blank for default: e*3/5" optional="true"/>
		<param name="lastScoreCutoff" type="integer" size="10" value="" label="Minimum lastal score (-e)" help="Leave blank for default: DNA: 40, protein: 100, fastq: 180" optional="true"/>
         </when>
      </conditional>
    </inputs>
    <outputs>
	  <data name="output1" format="tabular">
		  <change_format>
            <when input="outputFormat" value="1" format="maf" />
          </change_format>
	  </data>
    </outputs>
    <help>
    
.. class:: warningmark

**Note**. Database searches may take substantial amount of time. For large input datasets it is advisable to allow overnight processing.  

-----

**What it does**

This tool runs **lastal** using the lastWrapper script. Input datasets are broken into chunks to allow for parallel processing. Input is automatically screened for low complexity with tantan and converted to a blast-like tabular output. 

For more on lastal:
http://last.cbrc.jp/

lambda is
      the scale factor of the scoring matrix, which is calculated by
            the method of Yu and Altschul (YK Yu et al. 2003, PNAS
                  100(26):15688-93).

-----

**Output format**

The blast-like formats (blast, gene, liz)  contain 13 to 15 columns delimited by Tabs:

"gene":
 1. Id of your sequence 
 2. "NA" (in place of read description)
 3. GI of the database hit 
 4. Hit description or "NA"
 5. % identity
 6. Alignment length
 7. Start position in your sequence
 8. End position in your sequence
 9. Start position in database hit
 10. End position in database hit
 11. Bit score
 12. E-value
 13. Fraction of query covered by alignment

"liz":
 1. Id of your sequence 
 2. GI of the database hit 
 3. Hit description or "NA"
 4. % identity
 5. Alignment length
 6. Start position in your sequence
 7. End position in your sequence
 8. Start position in database hit
 9. End position in database hit
 10. Bit score
 11. E-value
 12. Fraction of query covered by alignment

"blast":
 1. Id of your sequence 
 2. GI of the database hit 
 3. % identity
 4. Alignment length
 5. Number of mismatches
 6. Number of gaps
 7. Start position in your sequence
 8. End position in your sequence
 9. Start position in database hit
 10. End position in database hit
 11. E-value
 12. Bit score

The MAF and lastal tabular formats are described in the last documentation:
http://last.cbrc.jp/doc/lastal.txt

MAF format looks like this:
        a score=15
        s chr3L        19433515 23 + 24543557 TTTGGGAGTTGAAGTTTTCGCCC
        s H04BA01F1907        2 21 +       25 TTTGGGAGTTGAAGGTT--GCCC

Lines starting with "s" contain: the sequence name, the start
coordinate of the alignment, the number of sequence letters
spanned by the alignment, the strand, the sequence length, and
the aligned letters.  The start coordinates are zero-based.  If
the strand is "-", the start coordinate is in the reverse
strand.

The same alignment in tabular format looks like this:
      15 chr3L 19433515 23 + 24543557 H04BA01F1907 2 21 + 25 17,2:0,4

The final column shows the sizes and offsets of gapless blocks
in the alignment.  In this case, we have a block of size 17,
then an offset of size 2 in the upper sequence and 0 in the
lower sequence, then a block of size 4.

-------

**Reference**

Zhang et al. A Greedy Algorithm for Aligning DNA Sequences. 2000. JCB: 203-214.

    </help>
</tool>
