<tool id="Count_Taxa" name="CountTaxa" version="0.1.2">
  <description>Generate a table of counts of taxa accross a number of samples for selected ranks. Display graphs. </description>
  <requirements>
      <requirement type="set_environment">REPO_PATH</requirement>
  </requirements>
  <command>
    \$REPO_PATH/countTaxaPlotWrapper.py
    --htmlFile $html_file
    --outputDir $html_file.files_path
    --supportFileLoc \$REPO_PATH/countTaxaFiles

#if $ranks.group_by_rank
    #if $ranks.rank_domain
    --domainFile $domain_counts
    #end if
    #if $ranks.rank_phylum
    --phylumFile $phylum_counts
    #end if
    #if $ranks.rank_class
    --classFile $class_counts
    #end if
    #if $ranks.rank_order
    --orderFile $order_counts
    #end if
    #if $ranks.rank_family
    --familyFile $family_counts
    #end if
    #if $ranks.rank_genus
    --genusFile $genus_counts
    #end if
    #if $ranks.rank_species
    --speciesFile $species_counts
    #end if
#else
    --idCountsFile $id_counts
    #if $ranks.taxid
        -T
    #end if
#end if

    countTaxaFromBlasts.py
    #for $f in $inputs
    "${f.name}=${f.file_name}"
    #end for
      -f $m8format
#if $source.blastdb == "RefSeq":
        -p accs
        -m "${source.source_select.fields.taxmapfile}"
        -n "${source.source_select.fields.taxdump}"
#end if
#if $source.blastdb == "Silva":
        -p hitid
        -m "${source.mappingFile.fields.path}"
        -n "${source.mappingFile.fields.taxdump}"
#end if
        -c $cutoff
        -C $method
#if $ranks.group_by_rank
    #for $printRank in str($ranks.printRanks).split(",")
        -R $printRank
    #end for
#end if


#if $filter.usefilter:
        -F 
        $filter.filterPct
#end if
  </command>
  <inputs>
      <param format="tabular" name="inputs" type="data" label="Hit table" help="Data missing? See TIP below" multiple="true"/>
 <param name="m8format" type="select" label="Hit table format">
            <option value="last">Lastal tabular</option>
            <option value="blast">Blast-like </option>
            <option value="gene" selected="True">Gene: Blast-like plus read and hit description columns</option> 
            <option value="liz">Liz: Blast-like plus hit description column</option>
     </param>
    <conditional name="source">
	    <param name="blastdb" type="select" label="Which blast database was used?">
              <option value="RefSeq">RefSeq</option>	    
              <option value="Silva">Silva</option>	    
	    </param>
        <when value="RefSeq">
	     <param name="source_select" type="select" display="radio" label="against target database">
             <options from_file="lastdb_p.loc" >
			   <column name="value" index="0"/>
			   <column name="name" index="1"/>
			   <column name="taxmapfile" index="3"/>
               <column name="taxdump" index="6"/>
			   <filter type="static_value" value="None" column="6" keep="false"/>
		   </options>
         </param>
        </when>
        <when value="Silva">
          <param name="mappingFile" type="select" display="radio" label="Map Silva IDs to">
           <options from_file="silva_mapping_tables.loc" >
			   <column name="value" index="0"/>
			   <column name="name" index="1"/>
			   <column name="path" index="2"/>
               <column name="taxdump" index="3"/>
			   <filter type="static_value" value="None" column="3" keep="false"/>
		   </options>
          </param>
        </when>
    </conditional>
    <param name="cutoff" type="float" size="10" value="0.01" label="Hide counts below this fraction of total:"/>
    <conditional name="ranks">
        <param name="group_by_rank" type="boolean" label="Group counts by taxa at selected ranks" help="Choose which ranks below" checked="True" truevalue="True" falsevalue="False"/>
        <when value="False">
        <param name="taxid" type="boolean" label="Count by taxid" help="Otherwise, count by hit id" checked="True" truevalue="True" falsevalue="False"/>
        </when>
        <when value="True">
    <param name="rank_domain" type="boolean" checked="True" truevalue="True" falsevalue="False" label="domain"/>
    <param name="rank_phylum" type="boolean" checked="True" truevalue="True" falsevalue="False" label="phylum"/>
    <param name="rank_class" type="boolean" checked="True" truevalue="True" falsevalue="False" label="class"/>
    <param name="rank_order" type="boolean" checked="True" truevalue="True" falsevalue="False" label="order"/>
    <param name="rank_family" type="boolean" checked="True" truevalue="True" falsevalue="False" label="family"/>
    <param name="rank_genus" type="boolean" checked="True" truevalue="True" falsevalue="False" label="genus"/>
    <param name="rank_species" type="boolean" checked="True" truevalue="True" falsevalue="False" label="species"/>
    <!--
         <param name="ranks" type="select" label="Ranks to collect counts on:" multiple="true">
            <option value="superkingdom">domain</option>
            <option value="phylum">phylum</option>
            <option value="class">class</option>
            <option value="order">order</option>
            <option value="family">family</option>
            <option value="genus">genus</option>
            <option value="species">species</option>
         </param>
         -->
         <param name="printRanks" type="select" label="Ranks to include in lineages:" multiple="true" help="E.G. Choosing 'superkingdom' will prepend 'Bacteria;' in front of bacterial taxa in output table">
            <option value="superkingdom">domain</option>
            <option value="phylum">phylum</option>
            <option value="class">class</option>
            <option value="order">order</option>
            <option value="family">family</option>
            <option value="genus">genus</option>
            <option value="species">species</option>
         </param>
</when>
</conditional>
	     <param name="method" type="select" label="How to deal with multiple hits per read:">
              <option value="tophit">TopHit: resolve ambiguous hits using hit counts</option>
              <option value="toporg">TopOrg: resolve ambiguous hits using organism counts</option>
              <option value="LCA">LCA: Use least common ancestor of all hits</option>
              <option value="first">Take first hit</option>	    
              <option value="all">Keep all hits</option>	    
              <option value="consensus">Consensus: None unless all hits are to same org</option>	    
              <option value="most">Take most common hit</option>	    
	     </param>
    <conditional name="filter">
        <param name="usefilter" type="boolean" checked="True" truevalue="True" falsevalue="False" label="Filter input table on hit quality"/>
        <when value="True">
             <param name="filterPct" type="integer" size="10" value="10" label="Keep only hits within this percentage of the best hit for each read. 0-> only the top score for each read."/>
        </when>
    </conditional>
   </inputs>
  <outputs>
      <data format="html" name="html_file" label="Taxon Bar Charts"/>
      <data format="tabular" name="domain_counts" label="Counts on Domain">
          <filter>ranks['group_by_rank'] and ranks['rank_domain']</filter>
      </data>
      <data format="tabular" name="phylum_counts" label="Counts on phylum">
          <filter>ranks['group_by_rank'] and ranks['rank_phylum']</filter>
      </data>
      <data format="tabular" name="class_counts" label="Counts on class">
          <filter>ranks['group_by_rank'] and ranks['rank_class']</filter>
      </data>
      <data format="tabular" name="order_counts" label="Counts on order">
          <filter>ranks['group_by_rank'] and ranks['rank_order']</filter>
      </data>
      <data format="tabular" name="family_counts" label="Counts on family">
          <filter>ranks['group_by_rank'] and ranks['rank_family']</filter>
      </data>
      <data format="tabular" name="genus_counts" label="Counts on genus">
          <filter>ranks['group_by_rank'] and ranks['rank_genus']</filter>
      </data>
      <data format="tabular" name="species_counts" label="Counts on species">
          <filter>ranks['group_by_rank'] and ranks['rank_species']</filter>
      </data>
      <data format="tabular" name="id_counts" label="Counts on id">
          <filter>ranks['group_by_rank']==False</filter>
      </data>
  </outputs>
  <help>

 .. class:: infomark

**TIP:** If your data is not TAB delimited, use *Text Manipulation-&gt;Convert* or *Blast-&gt;Parse blast text*

-----

**What it does**

Plots hits by sample and taxon.

This tool takes multiple (b)last hit tables (against Silva or RefSeq), assigns a taxon to each read based on what it hit, and returns a table of hits by sample and taxon for each selected rank.

These tables are plotted as stacked bar graphs and the underlying data can be downloaded as a tab separated text table.

-----

**What it ACTUALLY does**

This tool runs the script countTaxaFromBlasts.py (http://pyrodata.mit.edu/ddr2/scripts/show/67) and generates plots using the D3 javascript library.

</help>
</tool>
